value List a = {
  // Types can be simple (single-variant) or union (variant) types.
  variant Empty = {
    isEmpty :: Bool;
    isEmpty = true;
  };
  
  variant Nonempty = {
    // Data visible publicly for deconstruction, as in:
    // Nonempty { head: val x, tail: val xs }
    data = {
      head :: a;
      tail :: List a;
    }
    
    isEmpty :: Bool;
    isEmpty = false;
  };
};

printList :: List a -> sideeffect -> ();
printList xs = {
    if xs.isEmpty {
      return;
    }

    // Print is a built-in function of type a -> sideeffect
    eval print xs.head ();
    eval printList xs.tail ();
};
