index :: Iterable a -> Iterable (a, Integer);
index xs = {
  val i :: Integer = 0;
  for val x :: a in xs {
    yield (x, i);
	  i += 1;
  }
};

decimate :: Iterable a -> Integer -> Iterable a;
decimate xs n = {
  val ixs :: Iterable (a, Integer) = index xs;
  /* A lambda expression using pattern-matching to extract from a tuple. */
  val f :: (a, Integer) -> Bool = \(_, val i :: Integer) => i mod n != 0;
  return filter f ixs;
};

fst :: (a, b) -> a;
fst t = match t {
  (val a :: a, _) => a
};