// A simple IO monad using Harper.

value IO a = {
  data = {
    run :: sideeffect -> a;
  }

  bind :: (a -> IO b) -> IO b;
  bind run' = val IO { run = (\ => {
    (a :: a) = this.run ();
    return (run' a).run ();
  })};

  printIO :: b -> IO a;
  printIO x = {
    (p :: IO a) = val IO { run = (\ => {
      (a :: a) = this.run ();
      eval print x ();
      return a;
    })};
    return p;
  };

  printLnIO :: b -> IO a;
  printLnIO x = {
    (p :: IO a) = val IO { run = (\ => {
      (a :: a) = this.run ();
      eval printLn x ();
      return a;
    })};
    return p;
  };
};

returnIO :: a -> IO a;
returnIO x = val IO { run = (\ => x) };

fac :: Integer -> IO Integer;
fac n = {
  var (io :: IO Integer) = returnIO 1;
  var (i :: Integer) = 1;
  (mul :: Integer -> Integer -> IO Integer) = \(x :: Integer) (y :: Integer) => returnIO | x * y;
  
  while i <= n {
    io := io.printIO "Multiply by ";
    io := io.printLnIO i;
    io := io.bind | mul i;
    i += 1;
  }

  return io;
};

main :: sideeffect -> Integer;
main = {
  (io :: IO Integer) = fac 10;
  eval printLn "In main." ();
  return io.run ();
};
