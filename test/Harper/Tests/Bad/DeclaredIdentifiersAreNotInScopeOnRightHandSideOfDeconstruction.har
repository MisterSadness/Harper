main :: sideeffect -> ();
main = {
  // If lambdas could be recursive, i.e. `f` was visible in the body of the deconstructed lambda,
  // this code would have no sensible semantics, as `f` would be used during the evaluation 
  // of the value being assigned to it. This restriction could theoretically be dropped if the rhs is pure.
  (f :: Integer -> Integer) = (\(x :: Integer) => {
      eval printLn (f 10) ();
      return (\(n :: Integer) => n * x);
      }) 42 ();

  eval printLn (f 10) ();
};