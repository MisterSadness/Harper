index :: Iterable a -> Iterable (a, Integer);
index xs = {
  var (i :: Integer) = 0;
  for (x :: a) in xs {
    yield (x, i);
	  i += 1;
  }
};

map :: (a -> b) -> Iterable a -> Iterable b;
map f xs = {
  for (x :: a) in xs {
    yield f x;
  }
};

filter :: (a -> Bool) -> Iterable a -> Iterable a;
filter f xs = {
  for (x :: a) in xs {
    if f x {
	    yield x;
	  }
  }
};

decimate ::  Integer -> Iterable a -> Iterable a;
decimate n xs = {
  (ixs :: Iterable (a, Integer)) = index xs;
  /* A lambda expression using pattern-matching to extract from a tuple. */
  (f :: (a, Integer) -> Bool) = \(_, (i :: Integer)) => i mod n != 0;
  (x :: Iterable (a, Integer)) = filter f ixs;
  (y :: Iterable (a, b) -> Iterable a) = map fst;
  return map fst | filter f ixs;
};

fst :: (a, b) -> a;
fst t = match t {
  ((a :: a), _) => a
};

take :: Integer -> Iterable a -> Iterable a;
take n source = {
  var (i :: Integer) = 0;
  for (x :: a) in source {
    if i >= n {
      yield return;
    }
    yield x;
    i += 1;
  }
};

nats :: Iterable Integer;
nats = {
  var (i :: Integer) = 0;
  while true {
    yield i;
    i += 1;
  }
};

printList :: Iterable a -> sideeffect -> ();
printList xs = {
  for (x :: a) in xs {
    eval print x ();
    eval print " " ();
  }
  eval print "\n" ();
};

main :: sideeffect -> ();
main = {
  eval printList (take 10 | decimate 3 nats) ();
};